#!/usr/local/bin/python3

import sys
import re

def sqrt(value):
    return (value**(1/2))

def split_and_clear(equation):
    return (equation.strip().replace(' ', '').lower().split('='))

def split_elem(equation, chars):
    array = []
    i = 0
    for j in range(0, len(equation)):
        if (chars.find(equation[j]) != -1 and j != 0):
            array.append(equation[i:j])
            i = j
    array.append(equation[i:])
    return (array)

def split_into_array(equation):
    array = []
    for side in equation:
        list_group = []
        elems = re.findall('(?<!\^)([\*\/]?)([+-]?[\d]*\.?[\d]*)(x?\^?)([\d]*)', side)
        for elem in elems[:-1]:
            tmp = list(elem)
            if (not elem[1] or len(elem[1]) == 1 and (elem[1] == '-' or elem[1] == '+')):
                tmp[1] += '1'
            if (elem[2]):
                tmp[2] = 'x^'
                if (not elem[3]): tmp[3] = '1'
            else:
                tmp[2] = 'x^'
                tmp[3] = '0'
            list_group.append(''.join(tmp))
        array.append(split_elem(''.join(list_group), '+-'))
    return (array)

def reduce_elem(elem):
    tmp = re.findall(r'([\*\/]?)([+-]?[\d]+\.?[\d]*)\*?(x\^)([+-]?[\d]+)', elem)
    array = []
    for group in tmp:
        for elem in group:
            if (elem):
                array.append(elem)
    value = float(array[0])
    expo = int(array[2])
    for i in range(3, len(array), 4):
        if (array[i] == '*'):
            value *= float(array[i + 1])
            expo += int(array[i + 3])
        elif (array[i] == '/'):
            value /= float(array[i + 1])
            expo -= int(array[i + 3])
    return ((value, expo))

def regroup_X(equation):
    array = []
    for side in equation:
        tmp = []
        for elem in side:
            tmp.append(reduce_elem(elem))
        array.append(tmp)
    return (array)

def reduce_equ(equation):
    array = []
    tmp = {
        2: 0.0,
        1: 0.0,
        0: 0.0,
    }
    for i in range(len(equation)):
        sign = 1.0 if (i == 0) else -1.0
        for elem in equation[i]:
            if elem[1] in tmp:
                tmp[elem[1]] += (sign * elem[0])
            else:
                tmp[elem[1]] = (sign * elem[0])
    for i in sorted(tmp.keys(), reverse = True):
        array.append((tmp[i], i))
    while (array and array[0][0] == 0.0):
        del array[0]
    return (array if (array) else [(0.0, 0.0)])

def print_infos(equation):
    sys.stdout.write('Reduced form:')
    for i in range(len(equation)):
        sys.stdout.write(f" {'+' if (equation[i][0] >= 0) else '-'}{'' if (i == 0) else ' '}")
        if (equation[i][1] > 1):
            sys.stdout.write(f'{abs(equation[i][0])}x^{equation[i][1]}')
        elif (equation[i][1] == 1):
            sys.stdout.write(f'{abs(equation[i][0])}x')
        else:
            sys.stdout.write(f'{abs(equation[i][0])}')
    print(' = 0.0')
    print(f'Polynomial degree: {equation[0][1]}')

def solve_2nd(equation, interm_step):
    delta = equation[1][0] ** 2 - 4 * equation[0][0] * equation[2][0]
    if (interm_step):
        print('calculate delta (b^2 - 4 * a * c):')
        print(f'{equation[1][0]}^2 - 4 * {equation[0][0]} * {equation[2][0]} = {delta}')
    if (delta > 0):
        print(f"Discriminant is strictly possitive, the two solutions are{' ((-b (+-) sqrt(delta)) / (2 * a))' if (interm_step) else ''}:")
        if (interm_step):
            sys.stdout.write(f'x1 = (-({equation[1][0]}) - sqrt({delta})) / (2 * {equation[0][0]}) = ')
        print(f'{(-equation[1][0] - sqrt(delta)) / (2 * equation[0][0])}')
        if (interm_step):
            sys.stdout.write(f'x2 = (-({equation[1][0]}) + sqrt({delta})) / (2 * {equation[0][0]}) = ')
        print(f'{(-equation[1][0] + sqrt(delta)) / (2 * equation[0][0])}')
    elif (delta == 0):
        print(f"Discriminant is equal to zero, the solution is{' (-b / (2 * a))' if (interm_step) else ''}:")
        if (interm_step):
            sys.stdout.write(f'x = -({equation[1][0]}) / (2 * {equation[0][0]}) = ')
        print(f'{-equation[1][0] / (2 * equation[0][0])}')
    else:
        print(f"Discriminant is strictly negative, the two solutions are{' ((-b (+-) sqrt(-delta)i) / (2 * a))' if (interm_step) else ''}:")
        lower_div = 2 * equation[0][0]
        if (interm_step):
            sys.stdout.write(f'z1 = (-({equation[1][0]}) - sqrt(-({delta}))i) / (2 * {equation[0][0]}) = ')
        print(f'{-equation[1][0] / lower_div} - {sqrt(-delta) / lower_div}i')
        if (interm_step):
            sys.stdout.write(f'z2 = (-({equation[1][0]}) + sqrt(-({delta}))i) / (2 * {equation[0][0]}) = ')
        print(f'{-equation[1][0] / lower_div} + {sqrt(-delta) / lower_div}i')

def solve_1rst(equation, interm_step):
    print('The solution is:')
    if (interm_step):
        sys.stdout.write(f'x = -({equation[1][0]}) / {equation[0][0]} = ')
    print(f'{-equation[1][0] / equation[0][0]}')

def solve_nothing(equation, interm_step):
    if (equation[0][0] == 0):
        print('All real numbers are solution of the equation')
    else:
        print('The equation is insoluble')
    if (interm_step):
        print(f'{equation[0][0]} = 0.0')

def solve_equation(equation, interm_step):
    if (equation[0][1] == 2):
        solve_2nd(equation, interm_step)
    elif (equation[0][1] == 1):
        solve_1rst(equation, interm_step)
    else:
        solve_nothing(equation, interm_step)

def main():
    try:
        assert (2 <= len(sys.argv) <= 3)
        interm_step = 0
        if (len(sys.argv) == 3):
            assert (sys.argv[1] == '-i')
            interm_step = 1
    except:
        print("usage: ./computorV1 [-i] [equation]")
    else:
        equation = split_and_clear(sys.argv[1 + interm_step])
        equation = split_into_array(equation)
        equation = regroup_X(equation)
        if (interm_step):
            print('Regroup X with X:')
            for i in range(len(equation)):
                if (i == 1):
                    sys.stdout.write(' =')
                for j in range(len(equation[i])):
                    sys.stdout.write(f" {'+' if (equation[i][j][0] >= 0) else '-'}{'' if (j == 0) else ' '}{abs(equation[i][j][0])}x^{equation[i][j][1]}")
            print()
        equation = reduce_equ(equation)
        if (interm_step):
            print('Place all X on the same side')
            for i in range(len(equation)):
                sys.stdout.write(f" {'+' if (equation[i][0] >= 0) else '-'}{'' if (i == 0) else ' '}{abs(equation[i][0])}x^{equation[i][1]}")
            print(' = 0.0')
        print_infos(equation)
        if (0 <= equation[0][1] <= 2):
            solve_equation(equation, interm_step)
        else:
            print("The polynomial degree is stricly greater than 2, I can't solve.")

if __name__ == '__main__':
    main()
